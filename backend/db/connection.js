// üå± Load environment variables from `.env`
const dotenv = require('dotenv');
dotenv.config();

// üß© Import Mongoose (ODM library)
const mongoose = require('mongoose');

// üåç Determine which database to use based on environment
const isProduction = process.env.NODE_ENV === 'production';
const dbURI = isProduction
    ? process.env.MONGODB_URI // ‚òÅÔ∏è MongoDB Atlas (Production)
    : process.env.LOCAL_DB_URI; // üíª Local MongoDB (Development)


// üöÄ Connect to MongoDB
mongoose
    .connect(dbURI)
    .then(() => {
        console.log(
            `üöÄMongoDB Connected Successfully ‚Üí ${isProduction ? 'Atlas Cloud‚úÖ' : 'Localhost‚úÖ'
            }`
        );
    })
    .catch((err) => {
        console.error('‚ùå MongoDB Connection Error:', err.message);
        process.exit(1); // Exit process if DB fails to connect
    });

// üß† Connection Events (for debugging / monitoring)
mongoose.connection.on('connected', () => {
    console.log('üü¢ Mongoose connection is open.');
});

mongoose.connection.on('disconnected', () => {
    console.log('üî¥ Mongoose connection is disconnected.');
});

mongoose.connection.on('error', (err) => {
    console.error('‚ö†Ô∏è Mongoose connection error:', err);
});

// Graceful Shutdown (e.g., when app is stopped manually)
process.on('SIGINT', async () => {
    await mongoose.connection.close();
    console.log('üõë MongoDB connection closed due to app termination.');
    process.exit(0);
});

/* -------------------------------------------------
 * üíª LOCAL CONNECTION (commented version)
 * Uncomment this section only if want to force
 * connect locally for development testing.
 -------------------------------------------------

mongoose.connect(process.env.LOCAL_DB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('‚úÖ Local MongoDB connected.'))
.catch((err) => console.error('‚ùå Local MongoDB error:', err));

-------------------------------------------------- */

module.exports = mongoose;