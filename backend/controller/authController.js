const SignUp = require('../model/authModel');

//asynchronous controller function -> Fetches user data from MongoDB
const getSignUpData = async (req, res) => {
    try {
        const getUserSignUp = await SignUp.find({});

        if (!getUserSignUp === 0) {
            res.status(404).json({
                message: "User not found!"
            });
        } else {
            res.status(201).json({
                message: "Success!",
                length: getUserSignUp.length,
                users: getUserSignUp
            });
        }
    } catch (err) {
        res.status(500).json({
            message: "Server error!",
            error: err
        });
    }
};

//That registers a new user and returns a JWT token upon success
const register = async (req, res) => {
    try {
        const { email, password, cPassword, role } = req.body; //Extracts signup form data sent from the frontend
        const userExist = await SignUp.findOne({ email }); //Checks if the email is already registered in MongoDB.

        if (userExist) {
            return res.status(400).json({
                message: "Email already exists" //Returns an error if the email is already taken â€” prevents duplicate accounts.
            });
        }

        const createUser = await SignUp.create({ //Creates a new user in the database -> The pre("save") middleware from model will hash the password and cPassword before saving.
            email,
            password,
            cPassword,
            role
        });

        console.info(createUser);
        res.status(201).json({ //a success message -> a JWT token generated by .generateToken() ->the userId so the frontend can store or use it
            message: "Sign Up successfully.",
            token: await createUser.generateToken(),
            userId: createUser._id.toString()
        });
    } catch (err) {
        res.status(500).json({
            message: "Internal server error",
            error: err.message
        });
    }
};

// For Login 
const login = async (req, res) => {
    try {
        const { email, password } = req.body;

        // Check if the user exists in the database
        const userExist = await SignUp.findOne({ email });

        if (!userExist) {
            return res.status(400).json({ message: "Invalid credentials" });
        }

        // Ensure comparePassword exists before calling it
        if (typeof userExist.comparePassword !== "function") {
            return res.status(500).json({ message: "Authentication method is missing or misconfigured!" });
        }

        const isPasswordMatch = await userExist.comparePassword(password);

        if (isPasswordMatch) {
            return res.status(200).json({
                message: "Login successful!",
                token: await userExist.generateToken(),
                user: {
                    userId: userExist._id,
                    userEmail: userExist.email,
                    userRole: userExist.role
                    // optionally add more non-sensitive info here
                },
            });
        } else {
            return res.status(400).json({ message: "Invalid email or password!" });
        }

    } catch (err) {
        res.status(500).json({ message: "Internal server error!", error: err.message });
    }
};

// Fetch Individual profile info
const individualProfileInfo = async (req, res) => {
    try {
        const { userId } = req.jwtPayload;

        //Find profile details by ID
        const profileDetails = await SignUp.findById(userId).select("_id email username");

        if (profileDetails) {
            res.status(200).json({
                message: "Success",
                profileDetails
            });
        } else {
            res.status(404).json({
                message: "User not found",
            });
        }
    } catch (err) {
        res.status(500).json({
            message: "Internal server error.",
            error: err.message
        });
    }
};


module.exports = { getSignUpData, register, login, individualProfileInfo };